version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: vincenzo-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: vincenzo_shopping
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./infrastructure/init-data.sql:/docker-entrypoint-initdb.d/init-data.sql
    networks:
      - vincenzo-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Kafka Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: vincenzo-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - vincenzo-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: vincenzo-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - vincenzo-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      timeout: 20s
      retries: 10

  # Member Service
  member-service:
    build: ./member-service
    container_name: vincenzo-member-service
    ports:
      - "8081:8081"
      - "9091:9091"  # gRPC port
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: vincenzo_shopping
      DB_USERNAME: root
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - vincenzo-network

  # Product Service
  product-service:
    build: ./product-service
    container_name: vincenzo-product-service
    ports:
      - "8082:8082"
      - "9092:9092"  # gRPC port
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: vincenzo_shopping
      DB_USERNAME: root
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - vincenzo-network

  # Order Service
  order-service:
    build: ./order-service
    container_name: vincenzo-order-service
    ports:
      - "8083:8083"
      - "9093:9093"  # gRPC port
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: vincenzo_shopping
      DB_USERNAME: root
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MEMBER_SERVICE_HOST: member-service
      MEMBER_SERVICE_PORT: 9091
      PRODUCT_SERVICE_HOST: product-service
      PRODUCT_SERVICE_PORT: 9092
      PAYMENT_SERVICE_HOST: payment-service
      PAYMENT_SERVICE_PORT: 9094
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      member-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - vincenzo-network

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: vincenzo-payment-service
    ports:
      - "8084:8084"
      - "9094:9094"  # gRPC port
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: vincenzo_shopping
      DB_USERNAME: root
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MEMBER_SERVICE_HOST: member-service
      MEMBER_SERVICE_PORT: 9091
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      member-service:
        condition: service_started
    networks:
      - vincenzo-network

volumes:
  mysql_data:

networks:
  vincenzo-network:
    driver: bridge
